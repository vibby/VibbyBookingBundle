<?php

namespace Vibby\Bundle\BookingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository {

  /**
   * Finds all events included in 2 dates.
   *
   * @return array Some event entities.
   */
  public function findByDates($date1, $date2) {
    

    $em = $this->getEntityManager();
    if ($date1 > $date2) {$temp = $date2; $date2 = $date1; $date1 = $date2; }
    $dql =  "select e.date_from, e.date_to
            from Vibby\Bundle\BookingBundle\Entity\Event e
            where
            not(
              (
                e.date_from > '" . $date1->format('Y-m-d') . "'
              and
                e.date_from > '" . $date2->format('Y-m-d') . "'
              ) or (
                e.date_to < '" . $date1->format('Y-m-d') . "'
              and
                e.date_to < '" . $date2->format('Y-m-d') . "'
              )
            )
            ";
            
    $q = $em->createQuery($dql);
    return $q->getResult();
  }
  
  public function getBookedIntervalsByDates($date1, $date2) {
        $entities = $this->findByDates($date1,$date2);
        $dates = array();
        $prevDateTo = 0;
        foreach($entities as $entity)
        {
          if ($prevDateTo != $entity["date_from"]->format('Ymd'))
          {
            $dates[] = array(
              $entity["date_from"]->format('U')+60*60*24*.5,
              $entity["date_to"]->format('U')+60*60*24*.5,
            );
          } else {
            $dates[count($dates)-1][1] = $entity["date_to"]->format('U');
          }
          $prevDateTo = $entity["date_to"]->format('U');
        }
        
        return $dates;
  }

}